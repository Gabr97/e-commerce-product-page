import Head from 'next/head'
import { GetServerSideProps } from 'next'
import axios from 'axios'
import { useEffect, useRef, useState } from 'react'
import { sideCart } from '@/components/SideCart'
import { cartUpdate } from '@/components/SideCart'
import Carousel from '@/components/Carousel'
import { mobileMenu } from '@/components/TopNavbar'


export const cartData = (product: any, price: any, quantity: any, thumb: any, total: any) => {

  let data = {
    product: {
      product_name: product.name, product_price: price, product_thumb: thumb
    },
    quantity: quantity,
    total: total

  }
  return data

}

export  function currencyFormat(num: Number) {
  return '$' + num.toFixed(2).replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,')
}

export default function Home(data: any) {


  const [quantity, setQuantity] = useState(0)
  const [carouselCount, setCaroulselCount] = useState(0)
  const [mobile, setMobile] = useState(false);

  let imgRef: any = useRef(null)
  const galleryRef: any = useRef(null)
  const productRef: any = useRef(null)
  const carouselMainImg: any = useRef(null)

  let product: any = data.data[0].attributes
  let productPrice = product.price;
  let descountPercentage = product.descount
  let valueWithDescount = (productPrice * descountPercentage) / 100
  let images = product.images.data

  let initialImage = images[0].attributes.url
  let initialThumb = images[0].attributes.formats.thumbnail.url

  let caroulselImgIndex: any = 0;

  let selectedElement: any = {}

  const handleThumb = (e: any, img: any, index: any) => {

    let selectedSrc;
    caroulselImgIndex = index
    console.log(caroulselImgIndex)

    if (Object.keys(selectedElement).length) {
      selectedElement.style.opacity = ''
    }
    selectedElement = e.currentTarget
    selectedElement.style.opacity = '0.6'
    selectedSrc = 'http://localhost:1337' + img.attributes.formats.medium.url;
    imgRef.current.src = selectedSrc

  }

  const handleQuantity = (operator: string) => {
    if (operator == 'sub' && quantity >= 1) {
      setQuantity(quantity - 1)
    } else if (operator == 'add' && quantity <= 9) {
      setQuantity(quantity + 1)
    }

  }
  const addToCart = async () => {
    if (quantity > 0) {
      try {
        let total = valueWithDescount * quantity
        let data = cartData(product, valueWithDescount, quantity, initialThumb, total)
        const response = await axios.post('http://127.0.0.1:1337/api/carts', { "data": data })

        if (response.status == 200) {
          sideCart.current.classList.remove('hidden')
          sideCart.current.setAttribute('cart-open', 'true')
          cartUpdate()
        }
      } catch (error) {
        console.log(error)
      }
    }
  }

  const handleCarousel = (e: any) => {
    let src = e.currentTarget.src
    if (galleryRef?.current?.getAttribute('type-view') == 'desktop') {
      galleryRef?.current?.classList.remove('hidden')
    }
    productRef?.current?.classList?.add('blur-lg')
    carouselMainImg?.current?.setAttribute('src', src)
    setCaroulselCount(caroulselImgIndex)
    if (Object.keys(selectedElement).length) {
      selectedElement.style.opacity = ''
    }
  }
  const handleResponsive = () => {

    if (window.innerWidth < 768) {
      setMobile(true)
      if (galleryRef?.current?.getAttribute('type-view') == 'mobile') {
        galleryRef?.current?.classList.remove('hidden')
      }
      mobileMenu.current.classList.remove('hidden')
    } else {
      if (!mobileMenu.current.classList.contains('hidden')) {
        mobileMenu.current.classList.add('hidden')
      }
      setMobile(false)
    }
  }
  useEffect(() => {
    if (typeof window !== 'undefined') {
      handleResponsive()

      window.addEventListener('resize', handleResponsive)
    }

    // const observer = new MutationObserver(handleCartOpenChange);
    // observer.observe(sideCart.current, { attributes: true, attributeFilter: ['cart-open'] });

    // return () => {
    //     observer.disconnect();
    // };

  }, [mobile])


  return (
    <>
      <Head>
        <title>Product page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;400;900&display=swap" rel="stylesheet"></link>
      </Head>
      <div ref={productRef} className='container mx-auto'>
        <div className='py-5 md:px-10 px-5'>
          <div className='flex w-full items-center h-full gap-10'>
            <div className='grid md:grid-cols-2 md:gap-20 lg:gap-40 items-center w-full h-full'>
              <div className=''>
                {mobile ?

                  <Carousel view={'mobile'} galleryRef={galleryRef} carouselCount={carouselCount} images={images} setCaroulselCount={setCaroulselCount} carouselMainImg={carouselMainImg} productRef={productRef} mainImage={images[carouselCount].attributes.url} />
                  :
                  <>
                    <div className=''>
                      <img onClick={(e) => handleCarousel(e)} ref={imgRef} className='cursor-zoom-in transition-all rounded-[20px] w-full h-full object-contain' src={`http://127.0.0.1:1337${initialImage}`} />
                    </div>
                    <div className='py-10 grid grid-cols-4 gap-6'>
                      {images.map((img: any, i: any) => {
                        return <img onClick={(e) => handleThumb(e, img, i)} key={img.id} className='cursor-pointer rounded-[10px] transition-all duration-75 hover:outline-orange-500 hover:outline hover:outline-3' src={`http://127.0.0.1:1337${img.attributes.formats.thumbnail.url}`} />
                      })}
                    </div>
                  </>
                }
              </div>
              <div className=''>
                <h1 className='text-orange-500  font-semibold tracking-widest uppercase'>sneaker company</h1>
                <div>
                  <div className='text-5xl py-4 font-bold'>
                    <span>{product.name}</span>
                  </div>
                  <span className='text-gray-400'>
                    <p className='py-8'>
                      {product.description}
                    </p>
                  </span>
                  <div className=''>
                    {descountPercentage && descountPercentage > 0 ? <div>
                      <div className='flex items-center text-xl'>
                        <b>{currencyFormat(valueWithDescount)}</b>
                        <small className='mx-4 rounded-md font-semibold px-2 bg-orange-100 text-orange-500'>
                          {descountPercentage + '%'}
                        </small>
                      </div>
                      <small className='line-through text-gray-300 font-semibold'>{currencyFormat(product.price)}</small>
                    </div> : <b>{currencyFormat(product.price)}</b>}
                  </div>
                </div>
                <div className='py-6 flex items-center'>
                  <div className='rounded-lg bg-slate-200 w-[190px] px-5 py-3 justify-between flex items-center'>
                    <button onClick={() => handleQuantity('sub')} className='text-amber-500 font-bold'>-</button>
                    <span className='font-bold'>{quantity}</span>
                    <button onClick={() => handleQuantity('add')} className='text-amber-500 font-bold'>+</button>
                  </div>
                  <div className='px-4 w-full'>
                    <button onClick={() => addToCart()} className='hover:shadow-lg rounded-lg bg-orange-500 text-white px-5 py-3 shadow-md w-full'>
                      Add to cart
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Carousel view={'desktop'} galleryRef={galleryRef} carouselCount={carouselCount} images={images} setCaroulselCount={setCaroulselCount} carouselMainImg={carouselMainImg} productRef={productRef} mainImage={images[carouselCount].attributes.url} />
    </>
  )
}

export async function getServerSideProps() {

  let res = await axios.get('http://127.0.0.1:1337/api/products?populate=*')
  let data = res.data.data

  return {
    props: {
      data
    }
  }

}